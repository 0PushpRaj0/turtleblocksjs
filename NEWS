1 New project: a Javascript version of Turtle Blocks
  * basic block manipluation
  * basic block execution
  * expandable blocks working
  * cascading of expandable blocks
  * added arithmetic functions (arg parsing)
  * rotate turtle using easeljs rotation
  * implement actions (stacks)
  * implement boxes
  * added booleans
  * added slowmo playback
  * only one stack
  * added protoblocks for new boxes
  * added protoblock for new stacks
  * added time block
  * added mouse x, mouse y blocks
  * added controls for rabbit vs turtle
  * added controls for show/hide
  * added eraser button
  * added coordinate grids
  * fixed palette updates from block palette
  * added penup/down
  * added fill
  * load blocks
  * added click on block to run
  * added arc
  * added setxy
  * added set heading
  * added x, y, heading
  * added lots-o-sample projects
  * expanding arithmetic blocks
  * expanding 2-arg blocks
  * implemented color model (Munsell)
  * fixed Munsell 2.5 tables
  * added set background color
  * added trash
  * moved labels to container
  * set expandable blocks on load
  * fixed repeat docking bug
  * fixed filler hide bug
  * added real block highlighting
  * fixed problem with cascading arithmetic operators
  * trigger events on containers, not bitmaps
  * added multiple turtles (one for each start block)
  * added show text
  * added show image
  * different colors for each turtle
  * added turtle shell (aka sprites)
  * erase media (remove children)
  * reset turtle skin on clear
  * added scale text, images, turtle shell
  * center images on turtle
  * fixed turtle layering bug
  * fixed action name bug
  * open file from window location
  * major refactoring of code
  * prevent CR in numeric text area
  * added restore from trash
  * added wait block
  * added save/restore session
  * added stop turtle
  * first pass on a palette strategy
  * added save file to turtle.sugarlabs.org (when running from server) w/tch
  * added svg output to window
  * added menu to trash for restore and clear all
  * fixed block/turtle/canvas layering
  * fixed mouse down logic
  * figured out how to do inline svg with easeljs...
    beginning to convert to svg factory methods.
  * using container caching on blocks
  * fixed labels on random block
  * fixed label on less block (use &lt;)
  * fixed infinite loop problem when searching for expandables
  * fixed more issues with caching
  * reload media thumbnails on load
  * added collapsible stacks
  * added copy/paste of stacks
  * rename action blocks when loading projects
  * added palette entries when encountering new storein blocks
  * allow dragging from collapse button
  * added forever block
  * added 'stop action' (AKA break)
  * fixed several format issues with saved SVG
  * saving SVG thumbnail to server along with project file
  * seeding SVG with bg color on run
  * failed experimenting with zoom and scroll settings
  * fixed rounding bug in repeat code
  * fixed menu tearing issues
  * fixed placement of new items in Blocks menu
  * improved highlight logic
  * fixed labels on collapsed stacks
  * better compartmentalization of block code
   (using a dictionary for the code associated with each "advanced" block)
  * fixed scaling issues with SVG output
  * implemented selectable menu of samples (for server version)
  * check to see if running from a server or a local copy
  * implemented selectable menu of samples (for local filesystem version)
  * added paging to samples viewer
  * fixed crash due to uncaching something that hasn't been cached
    (2arg adjustable blocks)
  * hide stop button when running from server
  * major overhaul of SVG generation: async
    (Works with Firefox, Safari, Chrome)
  * added paging to samples downloads
  * added Easeljs caching throughout
  * added URL block
  * repositioned palettes when toolbar is unavailable so as not to overlap
    with on-canvas buttons
  * using png for thumbnails
  * added project name input when not using Sugar toolbars
  * added print block
  * consolidated various show blocks into one block
  * added 'any' docking parameter
  * fixed bug with new start block after clear all
  * show parameter values on blocks when running in debig mode
  * show and hide blocks
  * added keyboard short cuts
  * added keyboard sensor
  * fixed issue with break block scope
  * label box values during debug mode
  * fixed some race conditions
  * fill broken in save to SVG
  * fix race condition in palettes load
  * hover to invoke copy stack
  * while block (GCI - drakosvlad)
  * not block (GCI - Daksh Shah)
  * and block (GCI - Ignacio Rodriguez)
  * if-then-else block (GCI - Ignacio Rodriguez)
  * camera block for Firefox (GCI - Rafael Cordano)
  * video block for Firefox (GCI - Rafael Cordano)
  * speak block for Firefox (GCI - Rafael Cordano)
  * media blocks in Chrome
  * implement if-then-else, while, until
  * implement and or not
  * fixed problem with block resizing
  * drag palette items
  * query turtle blocks
  * confirm on clear
  * save dialog
  * palettes open by default
  * default start block position needs to move
  * copy stack copies instances instead of making new blocks?
  * enable number names for actions
  * enable number names for turtles
  * enable docking to any for boxes, equal
  * enable number names for boxes
  * fixed the problem with prototypes on the blocks palette
  * fixed highlighting of boolean blocks
  * global collapse stack button
  * smoother hand-off between palette and canvas when dragging blocks
  * work-around for number/string conversion error
  * adjust docks for vspace added outside of stacks
  * add mashape palette
  * translation blocks (w/Ignacio Rodriguez)
  * color forces max chroma; hue just sets hue.
  * preserve collapse state between save/load (w/Ignacio Rodriguez)
  * swipe to page samples viewer (w/Ignacio Rodriguez)
  * i18n (w/Ignacio Rodriguez)
  * mashape blocks (w/Ignacio Rodriguez and Sam Parkinson)
  * save/restore turtle state (w/Ignacio Rodriguez)
  * plugin mechanism
  * save colors; allow overwriting plugins
  * mechansim for removing plugins (w/Sam Parkinson)
  * rotate turtles with gesture (w/Sam Parkinson)
  * use busy cursor where approporate (w/Ignacio Rodriguez)
  * can open same file twice in a row (w/Ignacio Rodriguez)
  * fix palettes on Firefox (w/Ignacio Rodriguez)
  * add plugins to parameter update table
  * number block values are being set to string (Sam Parkinson)
  * fix problems with layering (Sam Parkinson)
  * more sensors (accelerometer w/Ignacio Rodriguez)
  * read pixels (w/Ignacio Rodriguez)
  * find an approach to cameras and microphone that work on Android
    (w/Sam Parkinson)
  * remove unused do blocks (when associated action is removed)
    (w/Ignacio Rodriguez)
  * clean up palette buttons layout after removing a plugin
    (w/Ignacio Rodriguez)
  * use snap to pixels
  * add images to blocks (w/Ignacio Rodriguez)
  * reorganize palettes and plugins
  * fix positioning problem with palettes due to multiple copies of the
    protoblocks being added to the protoList
  * expand boolean blocks
  * save stacks to personal palette
  * use nop blocks when encountering unknown blocks during load
  * scroll palette buttons with a gesture when there are too many
    (Sam Parkinson)
  * only show save on action blocks
  * only show copy/save menu from top block
  * plugin for RoDi (w/Martin Abente)
  * fixed problem with reloading camera or media block getting double image
  * fix coordinate grids offset due to scaling
  * step-by-step playback mode
  * sometimes scrolling menus does not work (Sam Parkinson)
  * update plugins to new logo "class"
  * allow for changes to playback mode while running
  * fixed problem with saveName
  * fixed multiple problems with collapsed stacks
  * change color of stroke when highlighting blocks
  * added image, and palette-stroke-highlight args to rtps files.
  * combine various run modes (switch between fast, slow, and step on the fly)
  * fix size of palette highlight (Sam Parkinson)
  * fix value box label in DOM (Sam Parkinson)
  * factory-branch fixes
    - proper updating of labels
    - proper resizing
    - proper calculation of hit area
  * fixed mouse button code & don't move stage when running code (Ignacio)

TODO:
  * add value to all value blocks, e.g., plus, minus...
  * save errors
  * display rubrics
  * more efficient until and while?
  * save to javascript
  * RTL support
  * zoom and scroll?
  * use graphical error messages
  * expand blocks horizontally
  * three-arg flow blocks
  * three-arg arg blocks
  * write SVG generator
  * artwork beautification?
  * try to detect difference between unknown flow and arg blocks

KNOWN BUGS:
  * show blocks should put blocks on top of everything else
  * blocks in a stack being dragged should be on top of everything else
  * sample projects cannot be shown on Android
  * don't save full-sized bitmap to session
  * find a scalable approach to drawing on the canvas
  * fix race conditions
  * not all blocks highlight when using step-by-step mode
  * collapse bug manifests itself when loading custom stacks
  * don't allow text in number blocks
