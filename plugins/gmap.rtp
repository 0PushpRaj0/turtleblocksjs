//* comment *//

Copyright (C) 2015 Yash Khandelwal

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

NOTE: Default local is downtown Boston.

//* globals *//

//* block:gmap *//
var gmapBlk = new ProtoBlock('gmap');
gmapBlk.palette = palettes.dict['GMAP'];
blocks.protoBlockDict['gmap'] = gmapBlk;
gmapBlk.staticLabels.push('Google map','coordinates','zoom factor');
gmapBlk.adjustWidthToLabel();
gmapBlk.twoArgMathBlock();

//* arg:gmap *//
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var url    = logo.parseArg(logo, turtle, conns[1]);
var zoom_factor   = logo.parseArg(logo, turtle, conns[2]);
if(!url) {
    url = 'http://maps.googleapis.com/maps/api/staticmap?center=42.357279,-71.065740';
}

if(!zoom_factor) {
    zoom_factor = 10;
}

if(zoom_factor == 0) {
    zoom_factor = 0;
}

gmapURL = url + '&size=800x800&zoom=' + zoom_factor +'&sensor=false';
block.value = gmapURL;

//* block:zoom *//
var zoomBlk = new ProtoBlock('zoom');
zoomBlk.palette = palettes.dict['GMAP'];
blocks.protoBlockDict['zoom'] = zoomBlk;
zoomBlk.staticLabels.push('zoom');
zoomBlk.adjustWidthToLabel();
zoomBlk.oneArgMathBlock();
zoomBlk.dockTypes[1] = 'anyin';
zoomBlk.defaults.push(10);

//* arg:zoom *//
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var zoomFactor = logo.parseArg(logo, turtle, conns[1]);
block.value = zoomFactor;

//* block:coord *//
var coordBlk = new ProtoBlock('coord');
coordBlk.palette = palettes.dict['GMAP'];
blocks.protoBlockDict['coord'] = coordBlk;
coordBlk.staticLabels.push('coordinates','latitude','longitude');
coordBlk.adjustWidthToLabel();
coordBlk.twoArgMathBlock();
coordBlk.dockTypes[1] = 'anyin';
coordBlk.dockTypes[2] = 'anyin';
coordBlk.defaults.push(42.357279,-71.065740);

//* arg:coord *//
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var latitude    = logo.parseArg(logo, turtle, conns[1]);
var longitude   = logo.parseArg(logo, turtle, conns[2]);

latitude = eval(latitude);
longitude = eval(longitude);

if(!latitude || !longitude) {
    latitude = 42.357279;
    longitude = -71.065740;
}
gmapURL = 'http://maps.googleapis.com/maps/api/staticmap?center=' + latitude + ',' + longitude;
        
block.value = gmapURL;

//* palette-icon:GMAP *//
<svg xmlns="http://www.w3.org/2000/svg" height="55" width="50" >
  <g fill="none" stroke="white" stroke-width="4">
    <path stroke-dasharray="5,5" d="M5 20 l215 0" />
    <path stroke-dasharray="10,10" d="M5 40 l215 0" />
    <path stroke-dasharray="20,10,5,5,5,10" d="M5 60 l215 0" />
  </g>
</svg>
//* palette-fill:GMAP *// #c0c0c0
//* palette-stroke:GMAP *// #ef003e
//* palette-highlight:GMAP *// #ffb1b3
//* palette-stroke-highlight:GMAP *// #000000
