{"BLOCKPLUGINS": {"showHeap": "var showHeap = new ProtoBlock('showHeap');showHeap.palette = palettes.dict['extras'];blocks.protoBlockDict['showHeap'] = showHeap;showHeap.zeroArgBlock();showHeap.staticLabels.push('show heap');showHeap.fontsize = '14px';", "pop": "var popBlk = new ProtoBlock('pop');popBlk.palette = palettes.dict['extras'];blocks.protoBlockDict['pop'] = popBlk;popBlk.parameterBlock();popBlk.staticLabels.push('pop');", "emptyHeap": "var emptyHeap = new ProtoBlock('emptyHeap');emptyHeap.palette = palettes.dict['extras'];blocks.protoBlockDict['emptyHeap'] = emptyHeap;emptyHeap.zeroArgBlock();emptyHeap.staticLabels.push('empty heap');emptyHeap.fontsize = '14px';", "saveHeap": "var saveHeap = new ProtoBlock('saveHeap');saveHeap.palette = palettes.dict['extras'];blocks.protoBlockDict['saveHeap'] = saveHeap;saveHeap.oneArgBlock();saveHeap.defaults.push('heap.json');saveHeap.docks[1][2] = 'textin';saveHeap.staticLabels.push('save heap');saveHeap.fontsize = '14px';", "loadHeap": "var loadHeap = new ProtoBlock('loadHeap');loadHeap.palette = palettes.dict['extras'];blocks.protoBlockDict['loadHeap'] = loadHeap;loadHeap.oneArgBlock();loadHeap.staticLabels.push('load heap');loadHeap.fontsize = '14px';loadHeap.docks[1][2] = 'filein';loadHeap.defaults = [[null, null]];", "push": "var pushBlk = new ProtoBlock('push');pushBlk.palette = palettes.dict['extras'];blocks.protoBlockDict['push'] = pushBlk;pushBlk.oneArgBlock();pushBlk.docks[1][2] = 'anyin';pushBlk.staticLabels.push('push');"}, "GLOBALS": "localHeap = [];", "ARGPLUGINS": {"pop": "var block = blocks.blockList[blk];block.value = localHeap.pop();"}, "FLOWPLUGINS": {"emptyHeap": "localHeap = [];", "showHeap": "var block = blocks.blockList[blk];var msgContainer = msgText.parent;msgContainer.visible = true;msgText.text = JSON.stringify(localHeap);msgContainer.updateCache();stage.swapChildren(msgContainer, last(stage.children));", "push": "var block = blocks.blockList[blk];var conns = block.connections;var arg = parseArg(activity, turtle, conns[1]);localHeap.push(arg);", "loadHeap": "var block = blocks.blockList[blk];var conns = block.connections;var arg = parseArg(activity, turtle, conns[1]);var oldHeap = localHeap;if (blocks.blockList[conns[1]].name == 'loadFile') {    if (!arg) {        errorMsg(_('You need to select a file.'));    }    else {        if (arg.length != 2) {            errorMsg(_('You need to select a file.'));        }        else {            try {                localHeap = JSON.parse(arg[1]);                if (!Array.isArray(localHeap)) {                    throw 'is not array';                }            }            catch (e) {                localHeap = oldHeap;                errorMsg(_('The file you selected does not contain a valid heap.'));            }        }    }}else {    errorMsg(_('The loadHeap block needs a loadFile block.'))};", "saveHeap": "function downloadFile(filename, mimetype, content) {    var download = document.createElement('a');    download.setAttribute('href', 'data:' + mimetype + ';charset=utf-8,' + content);    download.setAttribute('download', filename);    document.body.appendChild(download);    download.click();    document.body.removeChild(download);};var block = blocks.blockList[blk];var conns = block.connections;var arg = parseArg(activity, turtle, conns[1]);if (arg) {    downloadFile(arg, 'text/json', JSON.stringify(localHeap));};"}}
