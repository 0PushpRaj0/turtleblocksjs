//* comment *//

Copyright (C) 2015 Ignacio Rodr√≠guez

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

//* globals *//
localHeap = [];

//* flow:showHeap *//
var block = logo.blocks.blockList[blk];
logo.textMsg(JSON.stringify(localHeap));

//* flow:emptyHeap *//
localHeap = [];

//* flow:push *//
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var arg = logo.parseArg(logo, turtle, conns[1]);
localHeap.push(arg);

//* arg:pop *//
var block = logo.blocks.blockList[blk];
block.value = localHeap.pop();

//* flow:saveHeap *//
function downloadFile(filename, mimetype, content) {
    var download = document.createElement('a');
    download.setAttribute('href', 'data:' + mimetype + ';charset=utf-8,' + content);
    download.setAttribute('download', filename);
    document.body.appendChild(download);
    download.click();
    document.body.removeChild(download);
};
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var arg = logo.parseArg(logo, turtle, conns[1]);
if (arg) {
    downloadFile(arg, 'text/json', JSON.stringify(localHeap));
};

//* flow:loadHeap *//
var block = logo.blocks.blockList[blk];
var conns = block.connections;
var arg = logo.parseArg(logo, turtle, conns[1]);
var oldHeap = localHeap;
if (blocks.blockList[conns[1]].name == 'loadFile') {
    if (!arg) {
        logo.errorMsg(_('You need to select a file.'));
    }
    else {
        if (arg.length != 2) {
            logo.errorMsg(_('You need to select a file.'));
        }
        else {
            try {
                localHeap = JSON.parse(arg[1]);
                if (!Array.isArray(localHeap)) {
                    throw 'is not array';
                }
            }
            catch (e) {
                localHeap = oldHeap;
                logo.errorMsg(_('The file you selected does not contain a valid heap.'));
            }
        }
    }
}
else {
    logo.errorMsg(_('The loadHeap block needs a loadFile block.'))
};

//* block:push *//
var pushBlk = new ProtoBlock('push');
pushBlk.palette = palettes.dict['extras'];
blocks.protoBlockDict['push'] = pushBlk;
pushBlk.oneArgBlock();
pushBlk.docks[1][2] = 'anyin';
pushBlk.staticLabels.push('push');

//* block:pop *//
var popBlk = new ProtoBlock('pop');
popBlk.palette = palettes.dict['extras'];
blocks.protoBlockDict['pop'] = popBlk;
popBlk.parameterBlock();
popBlk.staticLabels.push('pop');

//* block:showHeap *//
var showHeap = new ProtoBlock('showHeap');
showHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['showHeap'] = showHeap;
showHeap.extraWidth(20);
showHeap.zeroArgBlock();
showHeap.staticLabels.push('show heap');

//* block:emptyHeap *//
var emptyHeap = new ProtoBlock('emptyHeap');
emptyHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['emptyHeap'] = emptyHeap;
emptyHeap.extraWidth(20);
emptyHeap.zeroArgBlock();
emptyHeap.staticLabels.push('empty heap');

//* block:saveHeap *//
var saveHeap = new ProtoBlock('saveHeap');
saveHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['saveHeap'] = saveHeap;
saveHeap.extraWidth(20);
saveHeap.oneArgBlock();
saveHeap.defaults.push('heap.json');
saveHeap.docks[1][2] = 'textin';
saveHeap.staticLabels.push('save heap');

//* block:loadHeap *//
var loadHeap = new ProtoBlock('loadHeap');
loadHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['loadHeap'] = loadHeap;
loadHeap.extraWidth(20);
loadHeap.oneArgBlock();
loadHeap.staticLabels.push('load heap');
loadHeap.docks[1][2] = 'filein';
loadHeap.defaults = [[null, null]];
