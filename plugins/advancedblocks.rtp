//* comment *//

Copyright (C) 2015 Walter Bender

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

//* globals *//
var accelerometer = {'x': null, 'y': null, 'z': null};
function saveAccelerometerData(event) {
    accelerometer['x'] = event.accelerationIncludingGravity.x;
    accelerometer['y'] = event.accelerationIncludingGravity.y;
    accelerometer['z'] = event.accelerationIncludingGravity.z;
};
if (window.DeviceMotionEvent) {
    window.addEventListener("devicemotion", saveAccelerometerData, false);
}
else{
    console.log("DeviceMotionEvent is not supported (no accelerometer)");
}
localHeap = [];

//* parameter:loudness *//
if (mic == null) {errorMsg('The microphone is not available.');
    value = 0;
} else {
    value = Math.round(mic.getLevel() * 1000);
};

//* flow:publish *//
if (args.length == 1) {
    doPublish(args[0]);
};

//* flow:savesvg *//
if (args.length == 1) {
    doSaveSVG(canvas, turtles, args[0])
};

//* flow:print *//
if (args.length == 1) {
    var msgContainer = msgText.parent;
    msgContainer.visible = true;
    msgText.text = args[0].toString();
    msgContainer.updateCache();
    stage.swapChildren(msgContainer, last(stage.children));
};

//* flow:showblocks *//
showBlocks();
turtleDelay = DEFAULTDELAY;

//* flow:hideblocks *//
hideBlocks();
turtleDelay = 0;

//* flow:speak *//
meSpeak.speak(args[0])

//* flow:setturtlename *//
var cblk = blocks.blockList[blk].connections[1];
var sourceName = args[0];
var targetName = args[1];
var thisTurtle = null;
var foundTurtle = false;
for (var i = 0; i < turtles.turtleList.length; i++) {
    thisTurtle = turtles.turtleList[i];
    if (sourceName == thisTurtle.name) {
        thisTurtle.name = targetName;
        foundTurtle = true;
        break;
    }
}
if (!foundTurtle) {
    errorMsg('Could not find turtle ' + sourceName, blk);
}

//* arg:accelerometerx *//
var block = blocks.blockList[blk];
block.value = accelerometer['x'];

//* arg:accelerometery *//
var block = blocks.blockList[blk];
block.value = accelerometer['y'];

//* arg:accelerometerz *//
var block = blocks.blockList[blk];
block.value = accelerometer['z'];

//* flow:showHeap *//
var block = blocks.blockList[blk];
var msgContainer = msgText.parent;
msgContainer.visible = true;
msgText.text = JSON.stringify(localHeap);
msgContainer.updateCache();
stage.swapChildren(msgContainer, last(stage.children));

//* flow:emptyHeap *//
localHeap = [];

//* flow:push *//
var block = blocks.blockList[blk];
var conns = block.connections;
var arg = parseArg(activity, turtle, conns[1]);
localHeap.push(arg);

//* arg:pop *//
var block = blocks.blockList[blk];
block.value = localHeap.pop();

//* flow:saveHeap *//
var block = blocks.blockList[blk];
var conns = block.connections;
var arg = parseArg(activity, turtle, conns[1]);
if (arg) {
    var blob = new Blob([JSON.stringify(localHeap)], {type: "text/json;charset=utf-8"});
    saveAs(blob, arg);
};

//* flow:loadHeap *//
var block = blocks.blockList[blk];
var conns = block.connections;
var arg = parseArg(activity, turtle, conns[1]);
var oldHeap = localHeap;
if (blocks.blockList[conns[1]].name == 'loadFile') {
    if (!arg) {
        errorMsg(_('You need to select a file.'));
    }
    else {
        if (arg.length != 2) {
            errorMsg(_('You need to select a file.'));
        }
        else {
            try {
                localHeap = JSON.parse(arg[1]);
                if (!Array.isArray(localHeap)) {
                    throw 'is not array';
                }
            }
            catch (e) {
                localHeap = oldHeap;
                errorMsg(_('The file you selected does not contain a valid heap.'));
            }
        }
    }
}
else {
    errorMsg(_('The loadHeap block needs a loadFile block.'))
};


//* block:loudness *//
var loudnessBlock = new ProtoBlock('loudness');
loudnessBlock.palette = palettes.dict['sensors'];
blocks.protoBlockDict['loudness'] = loudnessBlock;
loudnessBlock.parameterBlock();
loudnessBlock.staticLabels.push('loudness');

//* block:wait *//
var waitBlock = new ProtoBlock('wait');
waitBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['wait'] = waitBlock;
waitBlock.oneArgBlock();
waitBlock.staticLabels.push('wait');
waitBlock.defaults.push(1);

//* block:print *//
var printBlock = new ProtoBlock('print');
printBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['print'] = printBlock;
printBlock.oneArgBlock();
printBlock.staticLabels.push('print');
printBlock.docks[1][2] = 'anyin';

//* block:xturtle *//
var getxTurtleBlock = new ProtoBlock('xturtle');
getxTurtleBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['xturtle'] = getxTurtleBlock;
getxTurtleBlock.oneArgBlock();
getxTurtleBlock.docks[1][2] = 'anyin';
getxTurtleBlock.staticLabels.push('turtle x');
getxTurtleBlock.defaults.push('0');

//* block:yturtle *//
var getyTurtleBlock = new ProtoBlock('yturtle');
getyTurtleBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['yturtle'] = getyTurtleBlock;
getyTurtleBlock.oneArgBlock();
getyTurtleBlock.docks[1][2] = 'anyin';
getyTurtleBlock.staticLabels.push('turtle y');
getyTurtleBlock.defaults.push('0');

//* block:startTurtle *//
var startTurtleBlock = new ProtoBlock('startTurtle');
startTurtleBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['startTurtle'] = startTurtleBlock;
startTurtleBlock.oneArgBlock();
startTurtleBlock.docks[1][2] = 'anyin';
startTurtleBlock.defaults.push('0');
startTurtleBlock.staticLabels.push('start turtle');

//* block:stopTurtle *//
var stopTurtleBlock = new ProtoBlock('stopTurtle');
stopTurtleBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['stopTurtle'] = stopTurtleBlock;
stopTurtleBlock.oneArgBlock();
stopTurtleBlock.docks[1][2] = 'anyin';
stopTurtleBlock.defaults.push('0');
stopTurtleBlock.staticLabels.push('stop turtle');

//* block:publish *//
var pubBlock = new ProtoBlock('publish');
pubBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['publish'] = pubBlock;
pubBlock.oneArgBlock();
pubBlock.defaults.push('comment');
pubBlock.staticLabels.push('publish');
pubBlock.docks[1][2] = 'textin';

//* block:savesvg *//
var svgBlock = new ProtoBlock('savesvg');
svgBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['savesvg'] = svgBlock;
svgBlock.oneArgBlock();
svgBlock.defaults.push('title');
svgBlock.staticLabels.push('save svg');
svgBlock.docks[1][2] = 'textin';

//* block:showblocks *//
var showBlocks = new ProtoBlock('showblocks');
showBlocks.palette = palettes.dict['extras'];
blocks.protoBlockDict['showblocks'] = showBlocks;
showBlocks.zeroArgBlock();
showBlocks.staticLabels.push('show');

//* block:hideblocks *//
var hideBlocks = new ProtoBlock('hideblocks');
hideBlocks.palette = palettes.dict['extras'];
blocks.protoBlockDict['hideblocks'] = hideBlocks;
hideBlocks.zeroArgBlock();
hideBlocks.staticLabels.push('hide');

//* block:eval *//
var evalBlock = new ProtoBlock('eval');
evalBlock.palette = palettes.dict['number'];
blocks.protoBlockDict['eval'] = evalBlock;
evalBlock.twoArgMathBlock();
evalBlock.docks[1][2] = 'textin';
evalBlock.defaults.push('x');
evalBlock.defaults.push(100);
evalBlock.staticLabels.push('eval');
evalBlock.staticLabels.push('f(x)');
evalBlock.staticLabels.push('x');

//* block:speak *//
var speakBlock = new ProtoBlock('speak');
speakBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['speak'] = speakBlock;
speakBlock.oneArgBlock();
speakBlock.staticLabels.push('speak');
speakBlock.defaults.push('hello');
speakBlock.docks[1][2] = 'textin';

//* block:playback *//
var audioBlock = new ProtoBlock('playback');
audioBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['playback'] = audioBlock;
audioBlock.defaults.push(null);
audioBlock.oneArgBlock();
audioBlock.docks[1][2] = 'mediain';
audioBlock.staticLabels.push('playback');

//* block:stopplayback *//
var audioStopBlock = new ProtoBlock('stopplayback');
audioStopBlock.palette = palettes.dict['extras'];
blocks.protoBlockDict['stopplayback'] = audioStopBlock;
audioStopBlock.zeroArgBlock();
audioStopBlock.staticLabels.push('stop')

//* block:setturtlename *//
var setTurtleName = new ProtoBlock('setturtlename');
setTurtleName.palette = palettes.dict['extras'];
blocks.protoBlockDict['setturtlename'] = setTurtleName;
setTurtleName.twoArgBlock();
setTurtleName.docks[1][2] = 'anyin';
setTurtleName.docks[2][2] = 'anyin';
setTurtleName.defaults.push('0');
setTurtleName.defaults.push('Yertle');
setTurtleName.staticLabels.push('set\nturtle\nname');
setTurtleName.staticLabels.push('source');
setTurtleName.staticLabels.push('target');

//* block:accelerometerx *//
var accelerometerXBlk = new ProtoBlock('accelerometerx');
accelerometerXBlk.palette = palettes.dict['sensors'];
blocks.protoBlockDict['accelerometer'] = accelerometerXBlk;
accelerometerXBlk.parameterBlock();
accelerometerXBlk.staticLabels.push('motion x');

//* block:accelerometery *//
var accelerometerYBlk = new ProtoBlock('accelerometery');
accelerometerYBlk.palette = palettes.dict['sensors'];
blocks.protoBlockDict['accelerometery'] = accelerometerYBlk;
accelerometerYBlk.parameterBlock();
accelerometerYBlk.staticLabels.push('motion y');

//* block:accelerometerz *//
var accelerometerZBlk = new ProtoBlock('accelerometerz');
accelerometerZBlk.palette = palettes.dict['sensors'];
blocks.protoBlockDict['accelerometerz'] = accelerometerZBlk;
accelerometerZBlk.parameterBlock();
accelerometerZBlk.staticLabels.push('motion z');

//* block:push *//
var pushBlk = new ProtoBlock('push');
pushBlk.palette = palettes.dict['extras'];
blocks.protoBlockDict['push'] = pushBlk;
pushBlk.oneArgBlock();
pushBlk.docks[1][2] = 'anyin';
pushBlk.staticLabels.push('push');
pushBlk.fontsize = '14px';

//* block:pop *//
var popBlk = new ProtoBlock('pop');
popBlk.palette = palettes.dict['extras'];
blocks.protoBlockDict['pop'] = popBlk;
popBlk.parameterBlock();
popBlk.staticLabels.push('pop');
popBlk.fontsize = '14px';

//* block:showHeap *//
var showHeap = new ProtoBlock('showHeap');
showHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['showHeap'] = showHeap;
showHeap.zeroArgBlock();
showHeap.staticLabels.push('show heap');
showHeap.fontsize = '14px';

//* block:emptyHeap *//
var emptyHeap = new ProtoBlock('emptyHeap');
emptyHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['emptyHeap'] = emptyHeap;
emptyHeap.zeroArgBlock();
emptyHeap.staticLabels.push('empty heap');
emptyHeap.fontsize = '14px';

//* block:saveHeap *//
var saveHeap = new ProtoBlock('saveHeap');
saveHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['saveHeap'] = saveHeap;
saveHeap.oneArgBlock();
saveHeap.defaults.push('heap.json');
saveHeap.docks[1][2] = 'textin';
saveHeap.staticLabels.push('save heap');
saveHeap.fontsize = '14px';

//* block:loadHeap *//
var loadHeap = new ProtoBlock('loadHeap');
loadHeap.palette = palettes.dict['extras'];
blocks.protoBlockDict['loadHeap'] = loadHeap;
loadHeap.oneArgBlock();
loadHeap.staticLabels.push('load heap');
loadHeap.fontsize = '14px';
loadHeap.docks[1][2] = 'filein';
loadHeap.defaults = [[null, null]];
