// Copyright (c) 2015 Walter Bender
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// You should have received a copy of the GNU General Public License
// along with this library; if not, write to the Free Software
// Foundation, 51 Franklin Street, Suite 500 Boston, MA 02110-1335 USA

// Adnvaced blocks are defined here as using the same mechanism as plugins.

{

"FLOWPLUGINS":{
"publish":"if (args.length == 1) {doPublish(args[0]);};",
"savesvg":"if (args.length == 1) {doSaveSVG(canvas, turtles, args[0])};",
"print":"if (args.length == 1) {var msgContainer = msgText.parent; msgContainer.visible = true; msgText.text = args[0].toString(); msgContainer.updateCache(); stage.swapChildren(msgContainer, last(stage.children));};",
"showblocks":"showBlocks(); turtleDelay = DEFAULTDELAY;",
"hideblocks":"hideBlocks(); turtleDelay = 0;",
"speak":"meSpeak.speak(args[0]);"
},

"ARGPLUGINS":{
"time":"var d = new Date(); blocks.blockList[blk].value = (d.getTime() - time) / 1000;",
"mousex":"blocks.blockList[blk].value = stageX;",
"mousey":"blocks.blockList[blk].value = stageY;",
"mousebutton":"blocks.blockList[blk].value = stageMouseDown;",
"keyboard":"blocks.blockList[blk].value = currentKeyCode; lastKeyCode = currentKeyCode; currentKey = \"\"; currentKeyCode = 0;"
},

"BLOCKPLUGINS":{
"time":"var timeBlock = new ProtoBlock(\"time\"); timeBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"time\"] = timeBlock; timeBlock.parameterBlock(); timeBlock.staticLabels.push(\"time\");",
"mousex":"var mousexBlock = new ProtoBlock(\"mousex\"); mousexBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"mousex\"] = mousexBlock; mousexBlock.parameterBlock(); mousexBlock.staticLabels.push(\"mouse x\");",
"mousey":"var mouseyBlock = new ProtoBlock(\"mousey\"); mouseyBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"mousey\"] = mouseyBlock; mouseyBlock.parameterBlock(); mouseyBlock.staticLabels.push(\"mouse y\");",
"mousebutton":"var mousebuttonBlock = new ProtoBlock(\"mousebutton\"); mousebuttonBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"mousebutton\"] = mousebuttonBlock; mousebuttonBlock.booleanZeroArgBlock(); mousebuttonBlock.staticLabels.push(\"mouse button\");",
"keyboard":"var keyboardBlock = new ProtoBlock(\"keyboard\"); keyboardBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"keyboard\"] = keyboardBlock; keyboardBlock.parameterBlock(); keyboardBlock.staticLabels.push(\"keyboard\");",
"loudness":"var loudnessBlock = new ProtoBlock(\"loudness\"); loudnessBlock.palette = palettes.dict[\"sensors\"]; blocks.protoBlockDict[\"loudness\"] = loudnessBlock; loudnessBlock.parameterBlock(); loudnessBlock.staticLabels.push(\"loudness\");",
"wait":"var waitBlock = new ProtoBlock(\"wait\"); waitBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"wait\"] = waitBlock; waitBlock.oneArgBlock(); waitBlock.staticLabels.push(\"wait\"); waitBlock.defaults.push(1);",
"vspace":"var vspaceBlock = new ProtoBlock(\"vspace\"); vspaceBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"vspace\"] = vspaceBlock; vspaceBlock.zeroArgBlock();",
"print":"var printBlock = new ProtoBlock(\"print\"); printBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"print\"] = printBlock; printBlock.oneArgBlock(); printBlock.staticLabels.push(\"print\"); printBlock.docks[1][2] = \"anyin\";",
"xturtle":"var getxTurtleBlock = new ProtoBlock(\"xturtle\"); getxTurtleBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"xturtle\"] = getxTurtleBlock; getxTurtleBlock.oneArgMathBlock(); getxTurtleBlock.staticLabels.push(\"turtle x\"); getxTurtleBlock.defaults.push(0); getxTurtleBlock.docks[1][2] = \"anyin\";",
"yturtle":"var getyTurtleBlock = new ProtoBlock(\"yturtle\"); getyTurtleBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"yturtle\"] = getyTurtleBlock; getyTurtleBlock.oneArgMathBlock(); getyTurtleBlock.staticLabels.push(\"turtle y\"); getyTurtleBlock.defaults.push(0); getyTurtleBlock.docks[1][2] = \"anyin\";",
"startTurtle":"var startTurtleBlock = new ProtoBlock(\"startTurtle\"); startTurtleBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"startTurtle\"] = startTurtleBlock; startTurtleBlock.oneArgBlock(); startTurtleBlock.docks[1][2] = \"anyin\"; startTurtleBlock.defaults.push(0); startTurtleBlock.staticLabels.push(\"start turtle\");",
"stopTurtle":"var stopTurtleBlock = new ProtoBlock(\"stopTurtle\"); stopTurtleBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"stopTurtle\"] = stopTurtleBlock; stopTurtleBlock.oneArgBlock(); stopTurtleBlock.docks[1][2] = \"anyin\"; stopTurtleBlock.defaults.push(0); stopTurtleBlock.staticLabels.push(\"stop turtle\");",
"publish":"var pubBlock = new ProtoBlock(\"publish\"); pubBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"publish\"] = pubBlock; pubBlock.oneArgBlock(); pubBlock.defaults.push(\"comment\"); pubBlock.staticLabels.push(\"publish\"); pubBlock.docks[1][2] = \"textin\";",
"savesvg":"var svgBlock = new ProtoBlock(\"savesvg\"); svgBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"savesvg\"] = svgBlock; svgBlock.oneArgBlock(); svgBlock.defaults.push(\"title\"); svgBlock.staticLabels.push(\"save svg\"); svgBlock.docks[1][2] = \"textin\";",
"showblocks":"var showBlocks = new ProtoBlock(\"showblocks\"); showBlocks.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"showblocks\"] = showBlocks; showBlocks.zeroArgBlock(); showBlocks.staticLabels.push(\"show\");",
"hideblocks":"var hideBlocks = new ProtoBlock(\"hideblocks\"); hideBlocks.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"hideblocks\"] = hideBlocks; hideBlocks.zeroArgBlock(); hideBlocks.staticLabels.push(\"hide\");",
"eval":"var evalBlock = new ProtoBlock(\"eval\"); evalBlock.palette = palettes.dict[\"number\"]; blocks.protoBlockDict[\"eval\"] = evalBlock; evalBlock.twoArgMathBlock(); evalBlock.docks[1][2] = \"textin\"; evalBlock.defaults.push(\"x\"); evalBlock.defaults.push(100); evalBlock.staticLabels.push(\"eval\"); evalBlock.staticLabels.push(\"f(x)\"); evalBlock.staticLabels.push(\"x\");",
"speak":"var speakBlock = new ProtoBlock(\"speak\"); speakBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"speak\"] = speakBlock; speakBlock.oneArgBlock(); speakBlock.staticLabels.push(\"speak\"); speakBlock.defaults.push(\"hello\"); speakBlock.docks[1][2] = \"textin\";",
"playback":"var audioBlock = new ProtoBlock(\"playback\"); audioBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"playback\"] = audioBlock; audioBlock.defaults.push(null); audioBlock.oneArgBlock(); audioBlock.docks[1][2] = \"mediain\"; audioBlock.staticLabels.push(\"playback\");",
"stopplayback":"var audioStopBlock = new ProtoBlock(\"stopplayback\"); audioStopBlock.palette = palettes.dict[\"extras\"]; blocks.protoBlockDict[\"stopplayback\"] = audioStopBlock; audioStopBlock.zeroArgBlock(); audioStopBlock.staticLabels.push(\"stop\");"
},

"PALETTEFILLCOLORS":{},

"PALETTESTROKECOLORS":{},

"PALETTEHIGHLIGHTCOLORS":{},

"PALETTEPLUGINS":{}
}
